/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.unp.a3.View;

import com.unp.a3.Controller.InputController;
import com.unp.a3.Controller.ProductController;
import com.unp.a3.Model.Input;
import com.unp.a3.Model.Model;
import com.unp.a3.Model.enums.ReportType;
import com.unp.a3.Model.enums.ProductCategory;
import com.unp.a3.Model.Product;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 12825139786
 */
public class RegisterInputView extends javax.swing.JPanel {

    private DefaultTableModel defaultSearchTableModel;
    private DefaultTableModel defaultInputsTableModel;
    private Product productForManagement;
    /**
     * Creates new form RegisterInputView
     */
    public RegisterInputView() {
        initComponents();
        defaultSearchTableModel = (DefaultTableModel) searchTable.getModel();
        defaultInputsTableModel = (DefaultTableModel) inputsTable.getModel();
        initCategoryComboBox();
        addActionListenerCategoryComboBoox();
        setSearchTableData("");
        setInputTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputsTable = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnRegister = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        infoProductLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        supplierField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(965, 620));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setText("Registrar Entrada");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap(708, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        inputsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ID_Produto", "Quantidade", "Data_Entrada", "Fornecedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inputsTable);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/unp/a3/View/Images/8687727_ic_fluent_search_regular_icon.png"))); // NOI18N
        btnSearch.setText("Pesquisar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Formulário", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 14))); // NOI18N

        btnRegister.setBackground(new java.awt.Color(90, 195, 90));
        btnRegister.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Registrar");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        quantitySpinner.setBorder(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(infoProductLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(infoProductLabel)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jLabel3.setText("Quantidade");

        jLabel4.setText("Fornecedor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(supplierField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(153, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(supplierField)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Categoria", "Preço", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(searchTable);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel2.setText("Todas as entradas de produtos");

        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/unp/a3/View/Images/8686758_fluent_arrow_counterclockwise_regular_icon.png"))); // NOI18N
        btnRefresh.setText("Atualizar");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefresh))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchField.getText();
        if (!searchTerm.isEmpty()) {
            setSearchTableData(searchTerm);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        ProductController productController = new ProductController();
        InputController inputController = new InputController();
        boolean productUpdated = false, inputCreated = false;
        
        int quantity = (int) quantitySpinner.getValue();
        productForManagement.setQuantity(productForManagement.getQuantity() + quantity);
        productUpdated = productForManagement.update();
        
        String supplier = supplierField.getText().trim();
        if (!supplier.isEmpty()) {
            Input inputModel = new Input(quantity, supplier, productForManagement);
            inputCreated = inputModel.save();
        }
        
        if (productUpdated && inputCreated) {
            clearFields();
            new SuccessModalView("Registada").setVisible(productUpdated);
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void searchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTableMouseClicked
         int rowSelected = searchTable.rowAtPoint(evt.getPoint());
         int totalColums = searchTable.getColumnCount();
         Object[] rowData = new Object[totalColums];
         
         if (rowSelected != -1) {
             for (int i = 0; i < totalColums; i++) {
                 rowData[i] = searchTable.getValueAt(rowSelected, i);
             }
               // Revisar depois, posso passar diretamenre para o métodos
               productForManagement = new Product(
                     (int)rowData[0],
                     (String) rowData[1],
                     (String) rowData[2],
                     (double) rowData[3], 
                     (int) rowData[4]
             );
               
               setOverviewProduct();
         }
    }//GEN-LAST:event_searchTableMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        setInputTableData();
    }//GEN-LAST:event_btnRefreshActionPerformed
  
    private void setOverviewProduct() {
        infoProductLabel.setText(
                String.format(
                        "<html>" +
                            "<b>Nome:</b> %s <br>" +
                            "<b>Categoria:</b> %s <br>" +
                            "<b>Preço:</b> R$ %.2f <br>" +
                            "<b>Quantidade atual:</b> %d <br>" +
                        "</html>", 
                        productForManagement.getName(),
                        productForManagement.getCategory(),
                        productForManagement.getPrice(),
                        productForManagement.getQuantity()
                )
        );
    }
    
    private void setSearchTableData(String searchTerm) {
        defaultSearchTableModel.setNumRows(0);
        Product productModel = new Product();

        if (!searchTerm.isEmpty()) {
            List<Product> filteredProducts = productModel.getAll()
                    .stream()
                    .map(p -> (Product) p)
                    .filter(pm -> pm.getName().contains(searchTerm))
                    .collect(Collectors.toList());

            if (filteredProducts.isEmpty()) {
                setSearchTableData("");
                return;
            }
            
            filteredProducts.stream()
                    .map(p -> (Product) p)
                    .forEach(pm -> {
                        defaultSearchTableModel.addRow(new Object[]{
                            pm.getId(),
                            pm.getName(),
                            pm.getCategory(),
                            pm.getPrice(),
                            pm.getQuantity()
                        });
                    });
            return;
        }
        
        productModel.getAll()
                .stream()
                .forEach(p -> {
                      Product pm = (Product) p;
                      defaultSearchTableModel.addRow(
                              new Object[]{
                                  pm.getId(),
                                  pm.getName(),
                                  pm.getCategory(),
                                  pm.getPrice(),
                                  pm.getQuantity()
                              }
                      );
                  });
    }
    
    private void setInputTableData() {
        defaultInputsTableModel.setNumRows(0);
        Input inputModel = new Input();
        
        inputModel.getAll()
                .stream()
                .map(i -> (Input) i)
                .forEach(i -> {
                      defaultInputsTableModel.addRow(
                              new Object[]{
                                  i.getId(),
                                  i.getProductModel().getId(),
                                  i.getQuantity(),
                                  i.getInputDate().toString(),
                                  i.getSupplier()
                              }
                      );
                  });
    }
    
    private void initCategoryComboBox() {
        for (ProductCategory category : ProductCategory.values()) {
            categoryComboBox.addItem(category.getLabel());
        }
    }
    
     private void clearFields() {
        infoProductLabel.setText("");
        quantitySpinner.setValue(0);
        supplierField.setText("");
     }
    
    private void addActionListenerCategoryComboBoox() {
        categoryComboBox.addActionListener(e -> {
            String selected = (String) categoryComboBox.getSelectedItem();
            System.out.println("Mudei o valor da combo box para %s".formatted(selected));            
            Product productModel = new Product();
            List<Product> filteredProducts = productModel.getAll()
                    .stream()
                    .map(p -> (Product) p)
                    .filter(p -> p.getCategory().equals(selected))
                    .toList();
            
            if (!filteredProducts.isEmpty()) {
                defaultSearchTableModel.setRowCount(0);
                
                filteredProducts.stream()
                    .map(p -> (Product) p)
                    .forEach(pm -> {
                        defaultSearchTableModel.addRow(new Object[]{
                            pm.getId(),
                            pm.getName(),
                            pm.getCategory(),
                            pm.getPrice(),
                            pm.getQuantity()
                        });
                    });
                return;
            }
       
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel infoProductLabel;
    private javax.swing.JTable inputsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable searchTable;
    private javax.swing.JTextField supplierField;
    // End of variables declaration//GEN-END:variables
}
